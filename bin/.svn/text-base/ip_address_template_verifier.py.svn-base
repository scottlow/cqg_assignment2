#!/usr/bin/python

import sys
import verify_util
import bitstring_util
import ip_address_util
import re

condition_list = [
	['group_list_defined',
		"'group_list' must be defined"],
	['group_list_type',
		"'group_list' must be a list of lists of length at least 2"],
	['prefix_string',
		"Each group's prefix must be a unique string"],
	['vector_types',
		"Each vector in a group must be a list of length 1, 2, or 3"],
	['addresses',
		"each IP address in addresses is a tuple of four integers in "
		"range(256)"],
	['addresses_class_restriction',
		"each IP address (not including subnet mask) in addresses is "
		"in network class A, B, or C"],
	['subnet_mask',
		"subnet mask's binary representation has the form 1...1[0...0]"],
]

def valid_ip_address(decimal_tuple):
	'''
	purpose
		returns True if decimal_tuple describes a valid IP address,
		False otherwise
	precondition
		none
	'''
	if type(decimal_tuple) is not tuple:
		return False
	if len(decimal_tuple) != 4:
		return False
	for i in decimal_tuple:
		if type(i) is not int:
			return False
		if i not in range(256):
			return False
	return True

def verify_conditions(template,condition_list):
	conditions_dictionary = dict(condition_list)

	if not ('group_list' in dir(template)):
		return conditions_dictionary['group_list_defined']
	
	if not (type(template.group_list) is list):
		return conditions_dictionary['group_list_type']
	if not (len(template.group_list) > 0):
		return conditions_dictionary['group_list_type']

	prefix_list = []
	for group in template.group_list:
		if not (type(group) == list and len(group) >= 2):
			return conditions_dictionary['group_list_type'] + \
			 '\n\tgroup: ' + str(group)

		if not (type(group[0]) == str and group[0] not in prefix_list):
			return conditions_dictionary['prefix_string'] + \
			 '\n\tgroup: ' + str(group)
		else:
			prefix_list.append(group[0])

		for question in group[1:]:
			if len(question) not in [1,2,3]:
				return conditions_dictionary['vector_types'] + \
				 '\n\tvector: ' + str(question)

			for ip in question:
				if not valid_ip_address(ip):
					return conditions_dictionary[
					 'addresses'] + \
					 '\n\tvector: ' + str(question)
			for ip in question[0:2]: # class restrict'n n/a for mask
				if ip[0] not in range(224):
					return conditions_dictionary[
					 'addresses_class_restriction'] + \
					 '\n\tvector: ' + str(question)
			
			if len(question) == 3:
				# make a single bitstring of the netmask
				mask_bits = [bitstring_util.from_int(8,i)
				 for i in question[2]]
				mask_bits = "".join(mask_bits)
				
				if not re.match('^1*0*$',mask_bits):
					return conditions_dictionary[
					 'subnet_mask'] + \
					 '\n\tvector: ' + str(question)

# handle invocation from command line
if __name__ == '__main__':
	n = verify_util.template_verifier_main(sys.argv,
	 'Question Type ip_address: Template Verification Conditions',
	 condition_list,verify_conditions)

	if n == verify_util.COMMAND_LINE_SYNTAX_FAILURE:
		print 'Usage: ip_address_template_verifier.py [template_file]'
	
	sys.exit(n)
