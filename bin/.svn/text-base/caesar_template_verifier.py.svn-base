#!/usr/bin/python

import os
import sys
import verify_util
import file_util
import re

# list of verification identifier/condition pairs
condition_list = [
	['group_list',
		"'group_list' is defined and is a list"],
	['group_format',
		'Each group is a list of length at least 2'],
	['group_unique',
		'group[0] is a unique string'],
	['question_format',
		'Each question is a list of length 3'],
	['plain_text',
		"'plain_text' is a string of [A-Z]"],
	['key',
		"'key' is an integer in range(1,26)"],
	['cipher_text_hotspots',
		"'cipher_text_hotspots' is a list of indeces in " + \
		"range(len(plain_text))"],
]
 
def verify_conditions(template,condition_list):
	conditions_dictionary = dict(condition_list)

	if not ('group_list' in dir(template)):
		return conditions_dictionary['group_list']
	if not (type(template.group_list) == list):
		return conditions_dictionary['group_list']

	prefix_list = []
	for group in template.group_list:
		if not (type(group) == list and len(group) >= 2):
			return conditions_dictionary['group_format'] + \
			 '\n\tgroup: ' + str(group)

		if not (type(group[0]) == str and group[0] not in prefix_list):
			return conditions_dictionary['group_unique'] + \
			 '\n\tgroup: ' + str(group)
		else:
			prefix_list.append(group[0])

		for question in group[1:]:
			if not (type(question) == list and len(question) == 3):
				return \
				 conditions_dictionary['question_format'] + \
				 '\n\tquestion: ' + str(question)

			if not (type(question[0]) is str
			 and len(question[0]) > 0
			 and not re.search('[^A-Z]',question[0])):
				return conditions_dictionary['plain_text'] + \
				 '\n\tquestion: ' + str(question)

			if not (type(question[1]) is int
			 and question[1] in range(1,26)):
				return conditions_dictionary['key'] + \
				 '\n\tquestion: ' + str(question)

			for i in question[2]:
				if not (type(i) is int
				 and i in range(len(question[0]))):
					return \
					 conditions_dictionary[\
					 'cipher_text_hotspots']+\
					 '\n\tquestion: ' + str(question)

# handle invocation from command line
if __name__ == '__main__':
	n = verify_util.template_verifier_main(sys.argv,
	 'Question Type multiple_choice: Template Verification Conditions',
	 condition_list,verify_conditions)

	if n == verify_util.COMMAND_LINE_SYNTAX_FAILURE:
		print 'Usage: multiple_choice_template_verifier.py [template_file]'

	sys.exit(n)
