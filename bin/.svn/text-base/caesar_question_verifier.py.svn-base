#!/usr/bin/python

import sys
import os
import verify_util
import file_util
import re

# list of verification identifier/condition pairs
condition_list = [
	['variables_defined',
		"'product_family', 'question_type', 'plain_text', "
		"'key', 'cipher_text_hotspots' are defined"],
	['product_family',
		"'product_family' is 'caesar'"],
	['question_type',
		"'question_type' is 'caesar'"],
	['plain_text',
		"'plain_text' is a string of [A-Z]"],
	['key',
		"'key' is an integer in range(1,26)"],
	['cipher_text_hotspots',
		"'cipher_text_hotspots' is a list of indeces in " + \
		"range(len(plain_text))"],
]

def verify_conditions(question_directory,config,condition_list):
	conditions_dictionary = dict(condition_list)

	for v in ['product_family', 'question_type', 'plain_text',
	 'key', 'cipher_text_hotspots']:
		if not (v in dir(config)):
			return(conditions_dictionary['variables_defined'])

	if not (config.product_family == 'caesar'):
		return conditions_dictionary['product_family']

	if not (config.question_type == 'caesar'):
		return conditions_dictionary['question_type']
	
	if not (type(config.plain_text) is str and len(config.plain_text) > 0
	 and not re.search('[^A-Z]',config.plain_text)):
		return conditions_dictionary['plain_text']
	
	if not (type(config.key) is int and config.key in range(1,26)):
		return conditions_dictionary['key']
	
	for i in config.cipher_text_hotspots:
		if not (type(i) is int and i in range(len(config.plain_text))):
			return conditions_dictionary['cipher_text_hotspots']
		
# handle invocation from command line
if __name__ == '__main__':
	n = verify_util.question_verifier_main(sys.argv,
	 'Question Type caesar: Question Verification Conditions',
	 condition_list,verify_conditions)

	if n == verify_util.COMMAND_LINE_SYNTAX_FAILURE:
		print 'Usage: caesar_question_verifier.py [question_directory]'

	sys.exit(n)
