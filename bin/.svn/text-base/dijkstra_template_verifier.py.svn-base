#!/usr/bin/python

import sys
import verify_util
import dijkstra_util
import copy

# list of verification identifier/condition pairs
condition_list = [
	['variables_defined',
		"group_list and graph must be defined"],
	['graph_type',
		"graph just be a dictionary of dictionaries"],
	['outer_keys',
		"all keys in graph must be in [A..L]"],
	['inner_keys',
		"all keys in subdictionaries in graph must be in [A..L]"],
	['inner_values',
		"all values in subdictionaries in graph are non-negative ints"],
	['edges',
		"edges in graph are a subset of (AB, BC, CD, "
		 "AE, BF, CG, DH, EF, FG, GH, EI, FJ, GK, HL, IJ, JK, KL)"],
	['group_list_type',
		"'group_list' must be a list of lists of length at least 2"],
	['group_types',
		"In each group, item 0 is a string and the rest are lists"],
	['prefix_unique',
		"Each group's prefix string must be unique"],
	['vector_types',
		"Each vector in a group must be of length 5"],
	['weight_overrides',
		"weight_overrides is a subgraph of graph (i.e. all edges in "
		"weight_overrides are also in graph)"],
	['source_dest',
		"source and dest are nodes in graph"],
	['iterations',
		"iterations must be an int in [1..number of iterations at "
		"which dijkstra's algorithm terminates]"],
	['table_hotspots_type',
		"table_hotspots must be a list of lists [str,int]"],
	['table_hotspots_nodes',
		"each str in sublists of table_hotspots is a node in graph"],
	['table_hotspots_iterations',
		"each int in sublists of table_hotspots is in "
		"range(iterations)"],
	['deterministic',
		"the choice of next working node during dijkstra's algorithm "
		"must always be unambiguous"],
]

def check_graph(graph):
	'''
	purpose
		checks that graph satisfies the requirements described by
		'graph_type','outer_keys','inner_keys','inner_values','edges'
		in condition_list.
		returns None if the graph satisfies all five requirements,
		or one of the above strings otherwise
	precondition
		none
	'''
	if not (type(graph) is dict):
		return 'graph_type'
	for outer_key in graph:
		if not (type(graph[outer_key]) is dict):
			return 'graph_type'

		if not (outer_key in dijkstra_util.ALLOWED_NODES):
			return 'outer_keys'

		for inner_key in graph[outer_key]:
			if not (inner_key in dijkstra_util.ALLOWED_NODES):
				return 'inner_keys'

			if not (type(graph[outer_key][inner_key]) is int
			 and graph[outer_key][inner_key] >= 0):
				return 'inner_values'
	
			if not ((outer_key+inner_key)
			 in dijkstra_util.ALLOWED_EDGES
			 or (inner_key+outer_key)
			 in dijkstra_util.ALLOWED_EDGES):
				return 'edges'

def verify_conditions(template,condition_list):
	conditions_dictionary = dict(condition_list)

	for v in ['group_list','graph']:
		if not (v in dir(template)):
			return conditions_dictionary['variables_defined']
	
	error = check_graph(template.graph)
	if error is not None:
		return conditions_dictionary[error]
	
	# needed for checking source, dest, table_hotspots
	have_nodes = dijkstra_util.get_nodes(template.graph)

	if not (type(template.group_list) is list):
		return conditions_dictionary['group_list_type']
	if not (len(template.group_list) > 0):
		return conditions_dictionary['group_list_type']
	for g in template.group_list:
		if not (type(g) is list and len(g) >= 2):
			return conditions_dictionary['group_list_type']

	for g in template.group_list:
		if not (type(g[0]) is str):
			return conditions_dictionary['group_types'] +\
			 '\n\tgroup: ' + str(g)
		for i in g[1:]:
			if not (type(i) is list):
				return conditions_dictionary['group_types'] +\
				 '\n\tgroup: ' + str(g)

	if not (len(template.group_list) == \
	 len(set([g[0] for g in template.group_list]))):
		return conditions_dictionary['prefix_unique']

	for group in template.group_list:
	 for q in group[1:]: # skip prefix string
		if not (len(q) == 5):
			return conditions_dictionary['vector_types'] +\
			 '\n\tvector: ' + str(q)

		(source, dest, weight_overrides, iterations, table_hotspots) = q

		if check_graph(weight_overrides) is not None:
			return conditions_dictionary['weight_overrides'] +\
			 '\n\tvector: ' + str(q)
		for edge in dijkstra_util.get_edges(weight_overrides):
			if edge not in dijkstra_util.get_edges(template.graph):
				return conditions_dictionary[
				 'weight_overrides'] + '\n\tvector: ' + str(q)

		# apply weight overrides on a deep copy of template.graph
		q_graph = copy.deepcopy(template.graph)
		for node in weight_overrides:
			q_graph[node].update(weight_overrides[node])
		
		if not (source in have_nodes and dest in have_nodes):
			return conditions_dictionary['source_dest'] +\
			 '\n\tvector: ' + str(q)
		
		# instantiate graph & run dijkstra
		graph_obj = dijkstra_util.w_graph(q_graph)
		dijkstra_result = graph_obj.dijkstra(source,dest)

		if not (type(iterations) is int and
		 (1 <= iterations <= len(dijkstra_result))):
			return conditions_dictionary['iterations'] +\
			 '\n\tvector: ' + str(q)

		if not (type(table_hotspots) is list):
			return conditions_dictionary['table_hotspots_type']+\
				 '\n\tvector: ' + str(q)
		for hotspot in table_hotspots:
			if not (type(hotspot) is list):
				return conditions_dictionary[
				 'table_hotspots_type']+\
				 '\n\tvector: ' + str(q)
			if not (type(hotspot[0]) is str
			 and type(hotspot[1]) is int):
				return conditions_dictionary[
				 'table_hotspots_type']+\
				 '\n\tvector: ' + str(q)

			if not (hotspot[0] in have_nodes):
				return conditions_dictionary[
				 'table_hotspots_nodes']+\
				 '\n\tvector: ' + str(q)

			if not (hotspot[1] in range(len(dijkstra_result))):
				return conditions_dictionary[
				 'table_hotspots_iterations']+\
				 '\n\tvector: ' + str(q)
		
		iteration = 0
		#FIXME: possible false positive in a case like, e.g., weights:
		# A: 1, B: 2, C: 3
		# then later a new route is found and B is decreased to 1
		# ...can this happen? if so, need a deeper hook into dijkstra so
		# that we can know what's in the permanent set and ignore it.
		for row in dijkstra_result:
			# if there is more than one occurrence of minimum weight
			del row[source] # remove 0 value for source node
			if (row.values().count(min(row.values())) > 1):
				return conditions_dictionary['deterministic']+\
				 '\n\tvector: ' + str(q)+\
				 "\nambiguous choice of next node "+\
				 "in iteration "+str(iteration)+\
				 "; weights at this point:\n"+str(row)
			iteration += 1

# handle invocation from command line
if __name__ == '__main__':
	n = verify_util.template_verifier_main(sys.argv,
         'Question Type dijkstra: Template Verification Conditions',
         condition_list,verify_conditions)

        if n == verify_util.COMMAND_LINE_SYNTAX_FAILURE:
                print 'Usage: dijkstra_template_verifier.py [template_file]'

        sys.exit(n)
