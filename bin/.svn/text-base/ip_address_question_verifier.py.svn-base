#!/usr/bin/python

import sys
import verify_util
import bitstring_util
import ip_address_util
import re

condition_list = [
	['variables_defined',
		"'product_family', 'question_type', 'addresses' are defined"],
	['product_family',
		"'product_family' is 'ip_address'"],
	['question_type',
		"'question_type' is 'ip_address_class', 'same_network', or "
		"'same_network_mask'"],
	['ip_address_class',
		"addresses is a list of length 1"],
	['same_network',
		"addresses is a list of length 2"],
	['same_network_mask',
		"addresses is a list of length 3"],
	['addresses',
		"each IP address in addresses is a tuple of four integers in "
		"range(256)"],
	['addresses_class_restriction',
		"each IP address (not including subnet mask) in addresses is "
		"in network class A, B, or C"],
	['subnet_mask',
		"subnet mask's binary representation has the form 1...1[0...0]"],
]

def valid_ip_address(decimal_tuple):
	'''
	purpose
		returns True if decimal_tuple describes a valid IP address,
		False otherwise
	precondition
		none
	'''
	if type(decimal_tuple) is not tuple:
		return False
	if len(decimal_tuple) != 4:
		return False
	for i in decimal_tuple:
		if type(i) is not int:
			return False
		if i not in range(256):
			return False
	return True

def verify_conditions(question_directory,config,condition_list):
	conditions_dictionary = dict(condition_list)

	for v in [ 'product_family', 'question_type', 'addresses' ]:
		if not (v in dir(config)):
			return conditions_dictionary['variables_defined']
	
	if not (config.product_family == 'ip_address'):
		return conditions_dictionary['product_family']

	if not (config.question_type in ['ip_address_class','same_network',
	 'same_network_mask']):
		return conditions_dictionary['question_type']
	
	if config.question_type == 'ip_address_class':
		if not (type(config.addresses) is list and
		 len(config.addresses) == 1):
			return conditions_dictionary['ip_address_class']

	if config.question_type == 'same_network':
		if not (type(config.addresses) is list and
		 len(config.addresses) == 2):
			return conditions_dictionary['same_network']

	if config.question_type == 'same_network_mask':
		if not (type(config.addresses) is list and
		 len(config.addresses) == 3):
			return conditions_dictionary['same_network_mask']
		
	for ip in config.addresses:
		if not valid_ip_address(ip):
			return conditions_dictionary['addresses']
	for ip in config.addresses[0:2]: # class restriction n/a for masks
		if ip[0] not in range(224):
			return conditions_dictionary[
			 'addresses_class_restriction']
	
	if config.question_type == 'same_network_mask':
		# make a single bitstring of the netmask
		mask_bits = [bitstring_util.from_int(8,i)
		 for i in config.addresses[2]]
		mask_bits = "".join(mask_bits)

		if not re.match('^1*0*$',mask_bits):
			return conditions_dictionary['subnet_mask']

# handle invocation from command line
if __name__ == '__main__':
	n = verify_util.question_verifier_main(sys.argv,
	 'Question Type ip_address: Question Verification Conditions',
	 condition_list,verify_conditions)

	if n == verify_util.COMMAND_LINE_SYNTAX_FAILURE:
		print 'Usage: ip_address_question_verifier.py [question_directory]'

	sys.exit(n)
